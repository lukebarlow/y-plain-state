{
  "name": "Yubiquity",
  "tagline": "Sync plain javascript data between clients",
  "body": "yubiquity\r\n=========\r\n\r\nUse simple javascript data structures for state, and synchronise them across\r\nbrowsers.\r\n\r\nThis library essentially provides an API on top of Yjs objects, so that instead\r\nof doing things like\r\n\r\n```\r\nstate.set('key', Y.Array)\r\nvar a = state.get('key')\r\na.push([1, 2, 3])\r\n```\r\n\r\nEverything appears just as a normal JavaScript object, and you can do\r\n\r\n```\r\nstate.a = [1,2,3]\r\n```\r\n\r\nHere is a slightly longer example of how you set up and use it (for complete\r\nexamples see the examples directory )\r\n\r\n\r\n```\r\nimport { getProxyForYObject } from 'yubiquity'\r\n\r\nY({\r\n  db: {\r\n    name: 'indexeddb'\r\n  },\r\n  connector: {\r\n    name: 'websockets-client'\r\n  },\r\n  share: {\r\n    state : 'Map'\r\n  }\r\n}).then((y) => {\r\n  const state = getProxyForYObject(y.share.state)\r\n  // state is now something that appears like a normal JavaScript object,\r\n  // but is bound to Yjs and will sync with other connected clients\r\n\r\n  state.name = 'Set a string'\r\n  state.child = {\r\n    a : 1,\r\n    b : [1,2,3]\r\n  }\r\n\r\n  state.on('change', () => {\r\n    redrawUi(state) // for example\r\n  })\r\n\r\n})\r\n\r\n```\r\n\r\nSee the examples directory for more example apps",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}